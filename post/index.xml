<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ryan&#39;s Blog</title>
    <link>https://ryan1-chang.github.io/post/</link>
    <description>Recent content in Posts on Ryan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 18 Nov 2021 05:35:33 +0800</lastBuildDate><atom:link href="https://ryan1-chang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin簡潔的利器：local function</title>
      <link>https://ryan1-chang.github.io/post/kotlin-local-function/</link>
      <pubDate>Thu, 18 Nov 2021 05:35:33 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-local-function/</guid>
      
        <description>&lt;p&gt;如果只是local變數就不值得一提了，但是在kotlin連函數都可以宣告在另一個函數的local範圍內，可以宣告local函數能帶來什麼好處呢？&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin的this與類別標籤</title>
      <link>https://ryan1-chang.github.io/post/kotlin-class-label/</link>
      <pubDate>Tue, 16 Nov 2021 02:58:38 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-class-label/</guid>
      
        <description>&lt;p&gt;在類別裡this表示當前類別的物件，因為它作用的範圍是在巢狀中最內層的區塊，所以如果是在內部類別或匿名類別裡，要怎麼存取到外部類別的物件，kotlin提供了方便的表示式，類別本身都會隱含一個同名的標籤，透過this加上這個標籤的方式就可以指定是代表哪個類別物件了&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin類別的繼承</title>
      <link>https://ryan1-chang.github.io/post/kotlin-inheritance/</link>
      <pubDate>Fri, 12 Nov 2021 01:03:13 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-inheritance/</guid>
      
        <description>&lt;p&gt;繼承(Inheritance)是物件導向中很重要的概念，我們可以為具有相似特性的子類別(derived class)共同繼承自一個父類別(base class)，這樣不同的子類別都會有相同的特性(父類別的屬性和函數)，又各自擁有自己的屬性和函數，可以達到差異化並減少重複撰寫相同的實作代碼&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin的類別和物件</title>
      <link>https://ryan1-chang.github.io/post/kotlin-class-object/</link>
      <pubDate>Wed, 10 Nov 2021 03:12:10 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-class-object/</guid>
      
        <description>&lt;p&gt;類別在物件導向就是用程式來模擬描述現實世界中實體的特性(屬性,property)和行為(函數,function)，這些實體就是從類別衍生出來的物件，物件就會擁有這個類別的屬性和函數，藉由物件間的互動來完成程式的要求&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 如果沒有主體內容則可以省略大括號
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin類別的起源：Any</title>
      <link>https://ryan1-chang.github.io/post/kotlin-any/</link>
      <pubDate>Mon, 08 Nov 2021 01:45:22 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-any/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;The root of the Kotlin class hierarchy. Every Kotlin class has Any as a superclass.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any是kotlin所有不可為空類別(也就是沒有?)的父類別，相當於java的Object類別，如果要允許空值還有一個Any?，而且嚴格來說Any?才是所有類別的根類別，雖然Any和Any?並沒有繼承的關係&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin如何避免NullPointerException</title>
      <link>https://ryan1-chang.github.io/post/kotlin-npe/</link>
      <pubDate>Thu, 04 Nov 2021 03:21:33 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-npe/</guid>
      
        <description>&lt;p&gt;NullPointerException已經可以說是java開發者的日常😱，只要程式邏輯上任何一處沒有經過深思熟慮都可能引發NPE的異常，那我們來看看kotlin在這一點上如何擺脫我們的困擾而做到&lt;a href=&#34;https://kotlinlang.org/docs/null-safety.html#top&#34; target=&#34;_blank&#34;&gt;Null safety&lt;/a&gt;的&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin變數宣告的val和var</title>
      <link>https://ryan1-chang.github.io/post/kotlin-val-var/</link>
      <pubDate>Tue, 02 Nov 2021 02:34:35 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-val-var/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;In Kotlin, everything is an object in the sense that we can call member functions and properties on any variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Kotlin所有的變數都是物件，可以呼叫它的成員函數和屬性，宣告會用到兩個關鍵字是val和var&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;val：用在唯讀(read-only)變數，只能賦值一次，類似在java中加上final，建議優先使用&lt;/li&gt;
&lt;li&gt;var：是可變(mutable)變數，值可以被修改，當需要重新給值的情況再改用var&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>使用Kotlin和Jetpack Compose開發了一個天氣App</title>
      <link>https://ryan1-chang.github.io/post/kotlin_jetpack_compose_app/</link>
      <pubDate>Tue, 12 Oct 2021 23:38:47 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin_jetpack_compose_app/</guid>
      
        <description>&lt;p&gt;Jetpack Compose是一套Android新的UI框架，在今年的7月28日推出了第一個穩定版本&lt;a href=&#34;https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html&#34; target=&#34;_blank&#34;&gt;1.0&lt;/a&gt;，作為一個Android開發的新手，很榮幸能跟到這個從根本上改變開發UI方式的里程碑，UI layout不再是由一堆XML文件構成，取而代之的是用簡潔的程式碼就能宣告描述出UI的樣子，當UI的資料有變化，就會自動重建刷新顯示&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Bundle a minimal JRE into an exe using Launch4j and Jlink</title>
      <link>https://ryan1-chang.github.io/post/jar-to-exe/</link>
      <pubDate>Mon, 26 Jul 2021 22:26:45 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/jar-to-exe/</guid>
      
        <description>&lt;p&gt;在Windows環境想要發布開發好的Java應用程序給別人使用，可以利用&lt;a href=&#34;http://launch4j.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;Launch4j&lt;/a&gt;轉換成exe檔方便執行，Launch4j會產生一個原生啟動程序，實際上還是依賴Java的執行環境來運行程式，另外一方面可以再透過Jlink生成自定義的JRE來縮小整體的體積，從JDK 9開始架構模組化了，不再提供默認的JRE，但還是能自己用提供的jlink工具程式來創建&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>GraalVM Native Image of Java Swing app</title>
      <link>https://ryan1-chang.github.io/post/swing-native/</link>
      <pubDate>Fri, 16 Jul 2021 00:29:13 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/swing-native/</guid>
      
        <description>&lt;p&gt;GraalVM Native Image可以將Java應用程序編譯為binary執行檔，不需要依賴JRE就可以運行，有啟動速度快和佔用記憶體較少的特點。GraalVM 21.0開始增加了對AWT和Swing的實驗性支持，雖然Java GUI應用程序不像Web應用程序受歡迎，但是我對於可以編寫一些有趣的桌面應用，並且能夠更簡單的分發給其他人使用，還是覺得是一件很棒的事！&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>自己做的第一個App</title>
      <link>https://ryan1-chang.github.io/post/first-post/</link>
      <pubDate>Tue, 06 Jul 2021 23:06:39 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/first-post/</guid>
      
        <description>&lt;p&gt;其實早在Android 2.3還是用Eclipse開發的時代就有寫過，後來一直都是做Web，直到最近因為新冠肺炎待在家躲疫情，WFH省了通勤時間，才有了這個app的誕生，在嘗試用Android Studio開發和重新摸索一些東西後，也順利的讓程式上架了&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>