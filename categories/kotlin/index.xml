<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on Ryan&#39;s Blog</title>
    <link>https://ryan1-chang.github.io/categories/kotlin/</link>
    <description>Recent content in kotlin on Ryan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 08 Nov 2021 01:45:22 +0800</lastBuildDate><atom:link href="https://ryan1-chang.github.io/categories/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin類別的起源：Any</title>
      <link>https://ryan1-chang.github.io/post/kotlin-any/</link>
      <pubDate>Mon, 08 Nov 2021 01:45:22 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-any/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;The root of the Kotlin class hierarchy. Every Kotlin class has Any as a superclass.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any是kotlin所有不可為空類別(也就是沒有?)的父類別，相當於java的Object類別，如果要允許空值還有一個Any?，而且嚴格來說Any?才是所有類別的根類別，雖然Any和Any?並沒有繼承的關係&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin如何避免NullPointerException</title>
      <link>https://ryan1-chang.github.io/post/kotlin-npe/</link>
      <pubDate>Thu, 04 Nov 2021 03:21:33 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-npe/</guid>
      
        <description>&lt;p&gt;NullPointerException已經可以說是java開發者的日常😱，只要程式邏輯上任何一處沒有經過深思熟慮都可能引發NPE的異常，那我們來看看kotlin在這一點上如何擺脫我們的困擾而做到&lt;a href=&#34;https://kotlinlang.org/docs/null-safety.html#top&#34; target=&#34;_blank&#34;&gt;Null safety&lt;/a&gt;的&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Kotlin變數宣告的val和var</title>
      <link>https://ryan1-chang.github.io/post/kotlin-val-var/</link>
      <pubDate>Tue, 02 Nov 2021 02:34:35 +0800</pubDate>
      
      <guid>https://ryan1-chang.github.io/post/kotlin-val-var/</guid>
      
        <description>&lt;blockquote&gt;
&lt;p&gt;In Kotlin, everything is an object in the sense that we can call member functions and properties on any variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Kotlin所有的變數都是物件，可以呼叫它的成員函數和屬性，宣告會用到兩個關鍵字是val和var&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;val：用在唯讀(read-only)變數，只能賦值一次，類似在java中加上final，建議優先使用&lt;/li&gt;
&lt;li&gt;var：是可變(mutable)變數，值可以被修改，當需要重新給值的情況再改用var&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
  </channel>
</rss>